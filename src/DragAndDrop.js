import * as React from "react";
import styled from "styled-components";
import { FlowChart, PortWrapper } from "@mrblenny/react-flow-chart";
import {
  Content,
  Page,
  Sidebar,
  SidebarItem,
  Button,
  Label
} from "./components";
import { chartSimple } from "./exampleChartState";
import CustomPort from "./CustomPort";

import * as actions from "./actions";
import mapValues from "./utils/mapValues";
import uuid from "uuid";
import Select from "react-select";
import _ from "lodash";

const Message = styled.div`
  margin: 10px;
  padding: 10px;
  background: rgba(0, 0, 0, 0.05);
`;

/**
 * id:-> AutoGenerated
 * type -> DropDown of input / output
 * properties -> MultiSelect
 */
const NODE_TYPES = {
  OUTPUT: "output",
  INPUT: "input"
};
const NODE_PROPERTY_VALUES = {
  YES: "yes",
  NO: "no"
};
const NODE_PROPERTIES = [
  { type: "value", label: "yes", value: NODE_PROPERTY_VALUES.YES },
  { type: "value", label: "no", value: NODE_PROPERTY_VALUES.NO }
];
const NODE_TYPE_OPTIONS = [
  { label: "output", value: NODE_TYPES.OUTPUT },
  { label: "input", value: NODE_TYPES.INPUT }
];

const AddPortsToSelectedItem = ({ selected, onChange, onSave }) => {
  if (!selected || !selected.id) return "";
  return (
    <React.Fragment>
      <Message>Add Ports To Selected Item</Message>
      <div style={{ marginLeft: "1rem", marginRight: "0.5rem" }}>
        <Label>Node Type</Label>
        <Select
          name="type"
          className="basic-single"
          classNamePrefix="select"
          isDisabled={false}
          isLoading={false}
          isClearable={false}
          isRtl={false}
          isSearchable={true}
          options={NODE_TYPE_OPTIONS}
          onChange={(option, b) =>
            onChange({ name: b.name, value: option.value }, selected.id)
          }
        />
        <Label>Node Properties</Label>
        <Select
          name="properties"
          options={NODE_PROPERTIES}
          className="basic-multi-select"
          classNamePrefix="select"
          onChange={(option, b) =>
            onChange(
              { name: b.name, value: option.value, type: option.type },
              selected.id
            )
          }
        />
      </div>
      <Button onClick={onSave}>Save</Button>
    </React.Fragment>
  );
};
export class DragAndDropSidebar extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      ...chartSimple,
      newPort: {
        nodeId: "",
        type: "",
        properties: {
          position: {}
        }
      }
    };
    this.config = {};
    this.stateActions = mapValues(actions, func => (...args) =>
      this.setState(func(...args))
    );
    this.validatePortData = this.validatePortData.bind(this);
    this.onPortSelect = this.onPortSelect.bind(this);
    this.createPort = this.createPort.bind(this);
    this.onPortSave = this.onPortSave.bind(this);
  }

  validatePortData() {
    const { newPort } = this.state;
    if (newPort.type === "" || newPort.nodeId === "") {
      alert("Invalid Data");
      return false;
    }
    return true;
  }

  createPort() {
    const { type, nodeId, properties } = this.state.newPort;
    this.setState(pState => {
      const nodes = Object.assign({}, pState.nodes, pState.nodes);
      const node = nodes[nodeId];
      const port = {};
      // const id = uuid.v4();
      const id = "customPort";
      port.id = id;
      port.type = type;
      port.properties = properties;
      node.ports[id] = port;
      nodes[nodeId] = node;
      return { nodes };
    });
  }

  onPortSave() {
    // validate the data
    if (this.validatePortData()) {
      this.createPort();
    }
  }

  onPortSelect({ name, value, type }, nodeId) {
    this.setState(pState => {
      const newPort = _.cloneDeep(pState.newPort); // Object.assign({}, pState.newPort, pState.newPort);
      if (name === "properties") {
        newPort[name][type] = value;
        console.log(newPort);
      } else {
        newPort[name] = value;
      }
      if (newPort.nodeId !== nodeId) newPort.nodeId = nodeId;
      return { newPort };
    });
  }

  render() {
    const { selected } = this.state;
    return (
      <Page>
        <Content>
          <FlowChart
            chart={this.state}
            callbacks={this.stateActions}
            config={this.config}
            Components={{
              Port: CustomPort
            }}
          />
        </Content>
        <Sidebar>
          <Message>Drag and drop these items onto the canvas.</Message>
          <SidebarItem
            type="top/bottom"
            ports={{
              port1: {
                id: "port1",
                type: "top",
                properties: {
                  custom: "property"
                }
              },
              port2: {
                id: "port1",
                type: "bottom",
                properties: {
                  custom: "property"
                }
              }
            }}
            properties={{
              custom: "property"
            }}
          />
          <SidebarItem
            type="bottom-only"
            ports={{
              port1: {
                id: "port1",
                type: "bottom",
                properties: {
                  custom: "property"
                }
              }
            }}
          />
          <SidebarItem
            type="left-right"
            ports={{
              port1: {
                id: "port1",
                type: "left",
                properties: {
                  custom: "property"
                }
              },
              port2: {
                id: "port2",
                type: "right",
                properties: {
                  custom: "property"
                }
              }
            }}
          />
          <SidebarItem
            type="all-sides"
            ports={{
              port1: {
                id: "port1",
                type: "left"
              },
              port2: {
                id: "port2",
                type: "right"
              },
              port3: {
                id: "port3",
                type: "top"
              },
              port4: {
                id: "port4",
                type: "bottom"
              }
            }}
          />
          <SidebarItem
            type="lots-of-ports"
            ports={{
              port1: {
                id: "port1",
                type: "left"
              },
              port2: {
                id: "port2",
                type: "right"
              },
              port3: {
                id: "port3",
                type: "top"
              },
              port4: {
                id: "port4",
                type: "bottom"
              },
              port5: {
                id: "port5",
                type: "left"
              },
              port6: {
                id: "port6",
                type: "right"
              },
              port7: {
                id: "port7",
                type: "top"
              },
              port8: {
                id: "port8",
                type: "bottom"
              },
              port9: {
                id: "port9",
                type: "left"
              },
              port10: {
                id: "port10",
                type: "right"
              },
              port11: {
                id: "port11",
                type: "top"
              },
              port12: {
                id: "port12",
                type: "bottom"
              }
            }}
          />
          <AddPortsToSelectedItem
            selected={selected}
            onChange={this.onPortSelect}
            onSave={this.onPortSave}
          />
        </Sidebar>
      </Page>
    );
  }
}
